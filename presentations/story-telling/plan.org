* Title
The secret art of storytelling in programming
Plan: https://docs.google.com/document/d/1VEXbTb3IpmX_JNRgRbk-WnFoykv6BtpianvCkOFSE8A/edit
Abstract: https://docs.google.com/document/d/1z1kVRoi_40cJ7q2EUvsvXzrzpk--qkN420mrOFbxLUc/edit# 

* Goal
- Motivate people to refactor into structured code with small functions

* Insights
- Structured code is easier to maintain
- Guidelines to refactor into code with small functions
- It plays well with Data-Oriented Programming
- SLAP Principle

* Ideas 
- The structure of an organisation shapes its work
- First code (according to your writing style), then refactor so that it is readable for anybody
- Minimize the required context required to understand code (no short var names)
- Programming as a communication task
- Structured communication (Wikipedia...)
- Controlled (movie) vs. Free (game, book) content consumption
- Optimize for exploration
- Do not interrupt my train of thought 
- In Wikipedia articles, concepts are mentioned, while the definition of the concept is somewhere else. As a reader I can choose if I want to deep dive or to skip. It's not only about "concept reuse". It's about ease of reading.
- Let the code explain itself > Let the function name explain itself.
- Reading Code from Top to Bottom: The Stepdown Rule (Clean code)
- Functions should do one thing


- Prendre  une page des miserables et mettre en hyperlink les descriptions

* Script
** Introduce the topic with curiosity

Let me introduce you to Dave. Dave is a full-stack JavaScript developer who works at Klafim, a Tel-Aviv company that develops an online book search service. Dave is a good JavaScript developer, he masters all the subtleties of the language, like the differences between ~null~ and ~undefined~, the quirks of ~this~ as well as the nuances between double equal and triple equal. Dave really loves programming. He follows tech gurus on Twitter, he reads HackerNews every morning and he regularly attends tech conferences. In short, Dave is passionate about programming, like you and me.

Yet, Dave does not enjoy his work at Klafim. Why? Because, on a daily basis he has to work on code that looks like this!

Long and boring code. Code full of comments and low-level details. This kind of code makes Dave want to hang its author. Except that sometimes, the author of the code is none other than Dave himself!


How many of you know developers like Dave? 
...
How many of you yourselves are Dave?
...
...
...

I used to be a Dave.
...
Until, a couple of year ago, I got tired of suffering from this gap between my passion for programming and my boredom at work!

** Introduce yourself

My name is Yehonathan. I was born in Paris, around 40 years ago. When I was a child, I hated reading. I couldn't read more than a few pages of a book without having this feeling of boredom causing me to yawn and close the book. However, I loved stories. I loved listening to the stories my father told me in the car on the way to school in the cold Parisian mornings.

My mother was going crazy over my inability to read books. She was worried about my schooling. You know, in France, in the 90's, reading books was really a big deal. My mother bought me all kinds of books but nothing helped.

Until the age of 15. What happened when I was 15? Well, I finished my first book. I managed to finish a book for the first time in my life!
But it was not a book like the others. It was a "choose your own adventure" book. You know, those interactive adventure books in which at the end of each page the reader has to make a choice. Like for example choosing between opening a secret door or stepping back. When I told my mother I finished a book, she was over the moon, thinking she had finally found a cure for my aversion to books. But her joy was short-lived. Indeed, apart from this book, I have not managed to read any other book. Unfortunately, my experience with the "choose your own adventure" book was not a transformative experience.

** Build it to the point

After completing my high school in France, I came to live in Israel where I studied engineering at the Technion in Haifa. For more than 20 years, I have worked as a developer in all kinds of companies with all kinds of programming languages: C++, Java, JavaScript, Ruby, Python and Clojure. And no matter what the programming language is, whenever I read long code, I experience the same kind of struggle I had as a child when I tried to read books. The same kind of struggle that Dave experiences at Klafim. I am bored in front of these endless lines of code. And yet, I love programming! I love programming... Once again this mysterious gap.

Maybe you don't experience the same difficulties as me, reading books? Well I envy you! But let me tell you about the next step of my journey as a developer. Because I'm quite sure the struggle I'm going to tell you about will sound familiar to all of you. Indeed, I am going to talk about contracts.

You see, 5 years ago, I became an independent consultant. And part of my job is to sign contracts with my clients. Contracts like this one!

For me, reading a contract is a nightmare. Literally, a nightmare! So many irrelevant details that I have to get through. But I have no choice but reading the entire contract in order to make sure that I have not missed an important piece of information concerning the fee or the conditions of liability! And that bores me even more than reading code. Not you?

Today, I'm here to share with you the secret behind these three kinds of struggle: struggle with books, with code and with contracts.   

I truly believe it's our responsiblity as a community of developers to stop causing suffering to guys like Dave. How? By writing code in shuch a way that it is fun to read.

** Insights

Cela gravite autour de trois axes: la memoire, l'attention et la structure. Ainsi que les capacites limitees de notre cerveau. Ce que l'on appelle l'empan.

Qu'est-ce que l'empan? L'empan est une unite de mesure antique. Environ  8 inches ce qui fait a peu pres 20 cm.

Nombres des outils de notre vie quotidienne sont adaptees a l'empan. Les poeles de cuisson, les couverts, les poignees de porte...

Et bien figurez-vous que notre memoire aussi a un empan. Nous allons jouer a un jeu si vous le voulez bien afin de decouvrir ensemble quel est l'empan de notre memoire. Je vais vous donner une liste de nombres que vous allez essayez de memoriser.


Ensuite la structure. Jeff Bezos et ses fameuses pizzas. Ce n'est pas qu'une question de nombre de membres dans une equipe. C'est egalement une question de niveau de responsabilite. Un PDG dirige une equipe de VPs. Un VP dirige une equipe de group leaders. Un group leaders dirige une equipe de team leaders. Un team leader dirige une equipe de developeurs. Ce serait etrange d'avoir dans une meme equipe un VP et un developeur. N'est-ce pas?

Au niveau de l'attention, c'est pareil. Notre cerveau a une capacite d'attention limitee: environ 25 minutes. Il y un graphe que Tony Buzan aime beaucoup. 
Je pense qu'il exagere un peu quand il dit que c'est le graphe le plus important du monde. Mais bon, c'est quand meme un graph interesant.

Connaissez-vous la methode Pomodoro? Au lieu d'essayer de rester concentre pendant 4 heures sur une tache qui demande de la concentration. On reste concentrer pendant 8 cycles de 30 minutes. Chaque cycle se compose de 25 minutes d'attention et 5 minutes de pause. Apres chaque session, c'est comme si on faisait un reboot de notre capacite d'attention.  


En general, les presentations durent 30 minutes afin de ne pas perdre l'attention de l'audience. 
D'ailleurs, cela fait environ 15 minutes que je vous parle et vous devez surement commencer a vous ennuyer. Afin de faire un reboot de votr attention, je vais vous raconter un blague. C'est un vieux truc que nombre de presentateurs utilisent. Vous etes prets?

Voila, c'est fait, je vous ai sortie de la zone HUH, simplement en vous faisant croire que j'allais vous raconter une blague. Votre attention est rebootee, nous pouvons continuer.


Je resume: notre cerveau a une capacite limitee de memoire, d'attention et de structure. Les livres que j'essayais de lire quand j'etais enfant ne respectaient pas les empans de mon cerveau. A chaque page, je perdais le fil. Et c'est exactement la meme chose pour Dave.

Comme l'a dit SICP, la programmation est avant tout un moyen d'exprimer des idees. C'est donc notre devoir de prendre en compte les empans de notre cerveau quand on ecrit du code afin de permettre a nos collegues d'explorer notre code de facon efficace. Et surtout d'arreter de faire souffrir des gars comme Dave a travers le monde...

** Dive Deep

Revenons sur le code qui a fait souffrir Dave. Il s'agit d'une recherche de livres dans une bibliotheque en ligne. Pour simplifier, disons que notre catalogue est fait de livres. Chaque livre a un titre, un ID d'auteur unique et une annee de publication. Nous avons egalement un base de donnees qui nous permet d'obtenir le nom d'un auteur en fonction de son ID. 

Supposons maintenant que nous voulons permettre a nos utilisateurs de rechercher les livres dont le titre contient une mot. Le resultat doit contenir le titre du livre et le nom de son auteur. 


Laissez-moi d'abord vous montrer a nouveau la version ennuyeuse du code.


Etes-vous d'accord avec moi que ce morceau de code est ennuyeux? 

Voyons ensemble pourquoi:
- La fonction est longue: une trentaine de ligne de code. Cela depasse mon empan d'attention. 
- Les commentaires perturbent le flux de ma pensee.
- On melange des concepts de haut niveau (map, filter, sort) avec des concepts de bas niveau (conditional branching, string manipulation, regular expression).


D'autre part, il est tres difficile d'explorer ce code. Quand Dave a du essayer comprendre comment le sort fonctionne, afin d'ajouter sa fonctionalite (supporter "descending" order). Voici ce qu'il a fait:

- Je survole les 18 premieres lignes puis j'arrive sur ~sortBy~. Je me dis que c'est surement la que je dois focusser mon attention. 
- Mais jusqu'a quelle ligne? Je continue a lire encore quelques lignes puis je vois que l'on passe a la selection des fields. 
- Pour comprendre la ligne 18 de la fonction, je suis oblige de lire les 17 lignes qui precedent! Ma capacite d'exploration est donc compromise.
- Il n'est pas facile de savoir quel est le contexte qui influence le comportement des lignes de code qui gerent le triage des livres.
- Ni le contexte d'entree, ni le contexte de sortie, d'ailleurs.




Etes-vous convaincus que ce code est ennuyeux?


Voyons maintenant ensemble comment rendre ce code amusant avec un coup de baguette magique.


Pourquoi je trouve ce code plus amusant?

- Les fonctions sont courtes. Elle respectent mon empan.
- Chaque fonction manipule des concepts de meme niveau.
- Je peux facilement explorer le code.
- Quand je veux approfondir ma comprehension d'une fonction, le contexte est clair et restreint.
- La lecture du code coule. 
- Je n'ai pas besoin de commentaires pour comprendre ce que fait le code. Chaque parcelle de code a un nom qui a du sens.


Et maintenant je vais vous reveler le secret de mon tour de magie. Pour ce tour, il ne vous faut pas une baguette magique, mais un balai magique. Etes-vous pret?

Le secret du tour en quelque mots: cacher la poussiere sous le tapis. 

Commencons par la fonction d'entree. Vous vous souvenez: cette fonction ennuyeuse d'une trentaine de lignes et pleine de poussiere: des fonctions generiques de manipulation de donnees, des regular expressions, des conversions de strings..

Et bien voici comment nous allons nous y prendre pour l'arranger. On va mettre toute la poussiere sous le tapis. Ou plus exactement sous 3 tapis auxquels nous allons donner des noms chics, que n'importe qui peut comprendre: ~searchBook~, ~enrichBooks~ et ~presentBooks~.

La fonction d'entree est maintenant propre. Etes-vous d'accord avec moi qu'il ne faut pas etre sorti de Saint-Cyr pour comprendre la signification de ces fonctions. Quand je dis signification, je parle de ce que la fonction fait et non pas de la facon dont elle est implementee. Le "quoi" de la fonction, pas le "comment".

Les 3 fonctions utilisees par la fonction d'entree ne sont pas encore propres. C'est pourquoi j'appelle cela balayer la poussiere sous le tapis. Maintentant, libre a moi de decider si je veux nettoyer une autre fonction. Mais au moins, ma fonction d'entree est propre. 


** Present the cherry on the top

Qu'en est-il des performances?


Comment vais-je tester ma nouvelle fonctionalite? 

Et bien je dois creer des nouveaux test cases pour la fonction ~handleSearchQuery~. Ce qui est embettant car je dois creer un catalog et toutes les options. Je dois me trimballer les ~authors~ ainsi que les ~query~ options. Alors que je ne veux tester que le triage! Donc je vais surement n'ajouter que un ou deux test cases.



** Zoom out

Refactoring guidelines

- SLAP 
- Short functions
- Try to avoid variable assignments
- Easier with FP
- Eeasuest with DOP

** Close the circle

I got so addicted to this storytelling way of writing code that today, when I need to fix a code, I first refactor it and only then I fix it.

Enumeration of the mind spans: attention, memory, structure.

I envision a day where books are written with skippable descriptions. No more kids yawning while reading books.


* Materials

- https://laconfianceenvous.coach/2019/08/24/lempan-du-cerveau/
